<?php

/**
 * Implements hook_node_access().
 */
function daily_question_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // Only site admins see daily question content
  if ($type == 'daily_question') {
    if (isset($account->roles[3]['site admin'])) {
      return NODE_ACCESS_ALLOW;
    }
    return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_permission().
 */
function daily_question_permission() {
  return array(
    'administer daily questions' => array(
      'title' => t('Administer Daily Questions'),
    ),
    'view daily questions' => array(
      'title' => t('View Daily Questions'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 *
 * Provides a custom entity type called 'Daily Question'.
 */
function daily_question_entity_info() {
  $info = array();
  $info['daily_question'] = array(
    'label' => t('Daily Question'),
    'base table' => 'daily_question',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'question_text',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'DailyQuestion',
    'controller class' => 'DailyQuestionController',
    'admin ui' => array(
      'path' => 'admin/daily-question',
      'controller class' => 'DailyQuestionUIController',
      'menu wildcard' => '%daily_question',
      'file' => 'daily_question.admin.inc',
    ),
    'module' => 'daily_question',
    'access callback' => 'daily_question_access_callback',
    'fieldable' => TRUE,
    'bundles' => array(
      'daily_question' => array(
        'label' => t('Daily Question'),
        'admin' => array(
          'path' => 'admin/daily-question',
          'access arguments' => array('administer daily questions'),
        ),
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function daily_question_menu() {
  $items = array();
  $items['question/%daily_question'] = array(
    'title' => t('Daily Question'),
    'page callback' => 'daily_question_view_entity',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'menu_name' => 'structure',
  );
  $items['admin/daily-questions'] = array(
    'title' => t('Daily Questions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('daily_question_overview_form', 'daily_question'),
    'description' => 'Manage Matching Daily Questions.',
    'access arguments' => array('administer daily questions'),
    'file' => module_load_include('inc', 'entity', 'entity.ui'),
  );
  return $items;
}

/**
 * Menu auto-loader for daily questions.
 */
function daily_question_load($id) {
  $daily_question = entity_load('daily_question', array($id));
  return array_pop($daily_question);
}

/**
 * Callback for daily question pages.
 */
function daily_question_view_entity($daily_question) {
  $daily_question_entity = entity_view('campaign', array($daily_question->id => $daily_question));
  return $daily_question_entity;
}

/**
 * Check access permissions for daily question entities.
 */
function daily_question_access_callback($op, $daily_question = NULL, $account = NULL) {
  if ($op == 'view' && user_access('access content', $account)) {
    return TRUE;
  }
  elseif (user_access('administer daily questions', $account)) {
    return TRUE;
  }
  return FALSE;
}

class DailyQuestion extends Entity {

  /*
   * Override to allow for a custom default URI
   */
  protected function defaultUri() {
    return array('path' => 'question/' . $this->identifier());
  }
}

class DailyQuestionController extends EntityAPIController {

  /**
   * Overrides buildContent() method.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);

    $build['question_date'] = array(
      '#type' => 'markup',
      '#markup' => $entity->date,
    );

    $build['answer_1'] = array(
      '#type' => 'markup',
      '#markup' => $entity->answer_1,
    );

    return $build;
  }

  /**
   * Override the save() method.
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {

    if (isset($entity->is_new)) {
      $entity->created = REQUEST_TIME;
    }
    $entity->updated = REQUEST_TIME;
    return parent::save($entity, $transaction);
  }
}

/**
 * Custom Daily Question UI Controller.
 */
class DailyQuestionUIController extends EntityDefaultUIController {

  /**
   * Override the default table headers in the overview table.
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('Questions'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }

}

/**
 * Implements hook_block_info().
 */
function daily_question_block_info() {
  $blocks['daily_question'] = array(
    'info' => t('Daily Question'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function daily_question_block_view($delta = '') {
  switch ($delta) {
    case 'daily_question':
      $block['subject'] = t("Today's Question");
      $block['content'] = drupal_get_form('daily_question_contents');
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function daily_question_contents() {

  global $user;

  $question_id = db_query("SELECT id FROM daily_question
    WHERE question_date = DATE(NOW())")->fetchField();
  $question = entity_load('daily_question', $question_id);

  // URL for the "Read More" Link
  $url = $question->read_more;

  // Set the default answer status to unanswered
  $user_answer_status = 'unanswered';

  // Check if the current user has answered correctly
  if (isset($question->correct_answers)) {
    $correct_users = $question->correct_answers;
    foreach ($correct_users as $correct_uid) {
      if ($correct_uid['uid'] == $user->uid) {
        $user_answer_status = 'correct';
      }
    }
  }

  // Check if the current user has answered incorrectly
  if (isset($question->incorrect_answers)) {
    $incorrect_users = $question->correct_answers;
    foreach ($incorrect_users as $incorrect_uid) {
      if ($incorrect_uid['uid'] == $user->uid) {
        $user_answer_status = 'incorrect';
      }
    }
  }

  // Create an array of the possible answers
  // Answers #1 and #2 are required, but answer #3 is optional
  $answers = array(
    1 => $question->answer_1,
    2 => $question->answer_2,
  );
  if (isset($question->answer_3)) {
    $answers[3] = $question->answer_3;
  }

  // Set a variable to denote the correct answer
  $correct_answer = $question->correct_answer;

  // Populate the quiz form displayed on the block
  $form['todays_question'] = array(
    '#type' => 'radios',
    '#title' => $question->question_text,
    '#options' => NULL,
    '#required' => FALSE,
  );
  // For users who have not answered, show the options
  if ($user_answer_status == 'unanswered') {
    $form['todays_question']['#options'] = $answers;

    // Include a submit button for logged-in users
    if ($user->uid != 0) {
      $form['user_answer'] = array(
        '#type' => 'submit',
        '#value' => t('Answer'),
      );
      $form['user_answer']['#submit'][] = 'daily_question_answer';

      // Pass some hidden values to the submit function
      $form['todays_answer'] = array(
        '#type' => 'hidden',
        '#value' => $correct_answer,
      );
      $form['todays_question_id'] = array(
        '#type' => 'hidden',
        '#value' => $question_id,
      );
    }
    // For anonymous users, add a login link
    else {
      $form['login'] = array(
        '#markup' => l("Login to answer", "user"),
      );
    }
  }
  // Instead of options, show the answer status if the user has answered
  elseif ($user_answer_status == 'correct') {
    $form['user_answer'] = array(
      '#markup' => t("Congrats! You answered today's question correctly. The correct 
      answer was <em>@correct</em> (<a href='@url'>read more</a>). Please come back tomorrow!", 
      array(
        '@correct' => $answers[$correct_answer],
        '@url' => $url,
      )),
    );
  }
  elseif ($user_answer_status == 'incorrect') {
    $form['user_answer'] = array(
      '#markup' => t("Sorry, you answered today's question incorrectly. The correct 
      answer is <em>@correct</em> (<a href='@url'>read more</a>). Please come back tomorrow!",
      array(
        '@correct' => $answers[$correct_answer],
        '@url' => $url,
      )),
    );
  }
  return $form;
}

function daily_question_answer($form, &$form_state) {
  global $user;

  $question_id = $form['todays_question_id']['#value'];
  $question = entity_load('daily_question', $question_id);
  // If the user answered correctly, add the user ID to the list of correct answers
  if ($form_state['values']['todays_question'] == $form['todays_answer']['#value']) {
    $question->correct_answers = array('uid' => $user->uid);
    $question->save;
  }
  // Otherwise add their user ID to the list of incorrect answers
  else {
    $question->incorrect_answers = array('uid' => $user->uid);
    $question->save;
  }
}

